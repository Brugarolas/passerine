type Bool = enum {
    True,
    False,
}

type Option A = enum {
    Some A,
    None,
}

use Option.{..}

unwrap_or = option default -> match option {
    Option.Some val -> val
    None -> default
}

type Result {T, E} = enum {
    Ok  T,
    Err E,
}

type LinkedList T = Option {
    value: T,
    next:  List T,
}

compiler = mod {
    type Lit = enum {
        alias Nat,
        alias Int,
        alias Float,
        alias Bool,
        alias String,
    }

    type Token = enum {
        Lit   Lit,
        Op    String,
        Iden  String,
        Delim Delim,
    }

    type Delim = enum {
        Paren  { tokens: [Token] },
        Square { tokens: [Token] },
        Curly  { forms:  [[Token]] },
    }
}

iter = mod {
    type Yield (Value, Resume) = effect Value -> Resume

    type Iter (Item, State) = struct {
        state: State,
        step:  State -> Option (Item, State),
    }

    next:    
        all  (Item, State) ->
        Iter (Item, State) -> 
        Iter (Item, State) / Yield (Item, ())
    = Iter { state, step } -> {
        match (step state) {
            Some (item, new_state) -> {
                Yield item
                Some (Iter { new_state, step })
            },
            None -> None,
        }
    }

    map = iter func -> {
        handle {
            (Yield val, resume) -> {
                Yield (func val)
                resume ()
            }
        } in {
            loop = iter -> match (next iter) {
                Some new_iter -> loop new_iter,
                None -> ()
            }
        }
    }
}

macro for = tokens -> {
    [pattern, Token.Iden "in", body] = tokens

    
}

macro match = tokens -> {
    [expr, arms] = tokens

    inside = match arms {
        Token.Delim Delim.Curly { forms } -> {

        }
    }

}
